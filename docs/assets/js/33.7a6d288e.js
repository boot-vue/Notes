(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{384:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[t._v("#")]),t._v(" Zookeeper")]),t._v(" "),a("p",[t._v("节点配置, 服务注册 发现, 调度, 分布式服务治理......")]),t._v(" "),a("p",[t._v("观察者模式, zookeeper 存储的数据变化, 通知已注册的节点")]),t._v(" "),a("h2",{attrs:{id:"集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[t._v("#")]),t._v(" 集群")]),t._v(" "),a("p",[t._v("一主多从,半数存活就能正常服务\n每个 server 数据一致\n客户端请求顺序执行\n数据更新原子性\n实时性")]),t._v(" "),a("h2",{attrs:{id:"投票机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#投票机制"}},[t._v("#")]),t._v(" 投票机制")]),t._v(" "),a("p",[t._v("每个节点自己投自己, 投自己选不出 master 的话, 就把票投给 id 值大的节点")]),t._v(" "),a("h2",{attrs:{id:"节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点类型"}},[t._v("#")]),t._v(" 节点类型")]),t._v(" "),a("p",[t._v("持久/短暂")]),t._v(" "),a("h2",{attrs:{id:"集群配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群配置"}},[t._v("#")]),t._v(" 集群配置")]),t._v(" "),a("p",[t._v("zookeeper data 目录下新建 "),a("code",[t._v("myid")]),t._v(" 文件, 里边放 id 值: 1,2,3...., 不同节点不要重复")]),t._v(" "),a("p",[t._v("zoo.cfg 增加节点配置")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("server.1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxxx:2888:3888\nserver.2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxxx:2888:3888\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("格式:")]),t._v(" "),a("blockquote",[a("p",[t._v("server.id=ip:数据通信端口号:投票通信端口号")])]),t._v(" "),a("h2",{attrs:{id:"客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[t._v("#")]),t._v(" 客户端")]),t._v(" "),a("p",[t._v("命令:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ls: 查看节点内容\nls2: 详细内容\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" /test watch: 监听/test节点路径变化\ncreate /test "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ttttt"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" 创建节点并设置内容\ncreate -e /test/mm "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mmmm"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" 创建短暂节点, zookeeper重启就没了\ncreate -s /test/nn "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nnn"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" nn00002"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(", 带序号自增\nget /test: 从节点/test取值\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" /test "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxx"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" 设置值\nget /test watch: 监听节点值变化\ndelete /test: 删除节点\nrmr /test: 递归删除\n")])])]),a("h2",{attrs:{id:"stat-结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stat-结构体"}},[t._v("#")]),t._v(" stat 结构体")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("czxid: 创建节点的事务zxid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间戳"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nctime-znode: 创建时间戳\nmzxid-znode: 最后更新的事务zxid\ndataLength-znode: 数据长度\nnumChildren-znode: 子节点数量\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("h2",{attrs:{id:"监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[t._v("#")]),t._v(" 监听器")]),t._v(" "),a("ol",[a("li",[t._v("主线程中创建 zookeeper 客户端, 客户端创建两个线程负责网络连接通信 connect 与监听 listener")]),t._v(" "),a("li",[t._v("connect 线程把注册的监听事件发送给 zookeeper")]),t._v(" "),a("li",[t._v("zookeeper 监听器列表中加入 客户端发来的要被监听的事件")]),t._v(" "),a("li",[t._v("zookeeper 监听到有数据/路径变化, 向客户端发送通知消息")]),t._v(" "),a("li",[t._v("客户端 listener 收到消息....")])]),t._v(" "),a("h2",{attrs:{id:"数据同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据同步"}},[t._v("#")]),t._v(" 数据同步")]),t._v(" "),a("ol",[a("li",[t._v("客户端向一个 server 写入数据")]),t._v(" "),a("li",[t._v("server 如果不是 master, 就发送给 master")]),t._v(" "),a("li",[t._v("master 会把数据广播给所有的客户端")]),t._v(" "),a("li",[t._v("半数以上的 server 写成功后就通知客户端成功了")])])])}),[],!1,null,null,null);s.default=r.exports}}]);